# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Deploy to Kubernetes cluster
          uses: Azure/k8s-deploy@v4
          with:
            # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
            namespace: # optional
            # Path to the manifest files which will be used for deployment.
            manifests: 
            # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
            images: # optional
            # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
            imagepullsecrets: # optional
            # Switch whether to pull the images from the registry before deployment to find out Dockerfile's path in order to add it to the annotations
            pull-images: # optional, default is true
            # Deployment strategy to be used. Allowed values are basic, canary and blue-green
            strategy: # default is basic
            # Route based on service, ingress or SMI for blue-green strategy
            route-method: # optional, default is service
            # Indicates the buffer time in minutes before the switch is made to the green version (max is 300 min ie. 5hrs)
            version-switch-buffer: # optional, default is 0
            # Traffic split method to be used. Allowed values are pod and smi
            traffic-split-method: # optional, default is pod
            # Annotations in the form of key/value pair to be added to TrafficSplit. Relevant only if deployement strategy is blue-green or canary
            traffic-split-annotations: # optional
            # Baseline and canary replicas count. Valid value between 0 to 100 (inclusive)
            baseline-and-canary-replicas: # optional, default is 0
            # Percentage of traffic redirect to canary deployment
            percentage: # optional, default is 0
            # deploy, promote, or reject
            action: # default is deploy
            # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
            force: # optional
            # Github token
            token: # default is ${{ github.token }}
            # Annotate the target namespace
            annotate-namespace: # optional, default is true
            # True if cluster is AKS private cluster
            private-cluster: # optional
            # Name of resource group - Only required if using private cluster
            resource-group: # optional
            # Resource group name - Only required if using private cluster
            name: # optional
